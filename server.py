#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Pump.Fun Server - –£–ª—å—Ç—Ä–∞ –±—ã—Å—Ç—Ä–∞—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å
–¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ –∞–¥–º–∏–Ω–∞–º–∏
+ –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–ö–ê–¢–û–í –ö–û–ú–¨–Æ–ù–ò–¢–ò –° –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–´–ú –•–†–ê–ù–ï–ù–ò–ï–ú
"""
import asyncio
import websockets
import json
import aiohttp
import time
import re
import requests
from typing import Dict, List, Optional
import logging
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor
import threading
from collections import deque
import socket
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –º–∏–Ω–∏–º—É–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
logging.basicConfig(level=logging.ERROR)
for logger_name in ["aiohttp", "websockets", "asyncio"]:
    logging.getLogger(logger_name).setLevel(logging.CRITICAL)

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ï–†–ê
# =============================================================================

# WebSocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WS_URL = "wss://pumpportal.fun/api/data"
SERVER_HOST = "0.0.0.0"  # –°–ª—É—à–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
SERVER_PORT = 80

# Twitter API (–±—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
TWITTER_API_URL = "https://api.twitterapi.io/twitter/community/moderators"
TWITTER_API_KEYS = [
    "337c6f9fe7114c1884cd56b158c15878",
    # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–ª—é—á–µ–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
]

# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
MAX_CONCURRENT_REQUESTS = 200
TWITTER_API_CONCURRENT_REQUESTS = 50
HTTP_TIMEOUT = 1  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
CONNECT_TIMEOUT = 0.5

# üóÑÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ì–û –•–†–ê–ù–ï–ù–ò–Ø
PROCESSED_COMMUNITIES_FILE = "processed_communities.json"
AUTOSAVE_INTERVAL = 60  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥


# =============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# =============================================================================

@dataclass
class TokenResult:
    mint: str
    name: str
    symbol: str
    community_url: str
    admin_name: str
    admin_username: str
    timestamp: float

    def to_dict(self) -> Dict:
        return {
            "mint": self.mint,
            "name": self.name,
            "symbol": self.symbol,
            "community_url": self.community_url,
            "admin_name": self.admin_name,
            "admin_username": self.admin_username,
            "timestamp": self.timestamp
        }


# =============================================================================
# üóÑÔ∏è –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï –ö–û–ú–¨–Æ–ù–ò–¢–ò
# =============================================================================

class PersistentCommunityStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏"""

    def __init__(self, filename: str = PROCESSED_COMMUNITIES_FILE):
        self.filename = filename
        self.data_lock = threading.Lock()

    def load_communities(self) -> set:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if isinstance(data, dict):
                        communities = set(data.get('communities', []))
                        print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(communities)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏–∑ {self.filename}")
                        return communities
                    elif isinstance(data, list):
                        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                        communities = set(data)
                        print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(communities)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")
                        return communities
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {self.filename}: {e}")

        print(f"üìÇ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º—å—é–Ω–∏—Ç–∏: {self.filename}")
        return set()

    def save_communities(self, communities: set, stats: dict = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with self.data_lock:
                data = {
                    'communities': list(communities),
                    'last_updated': time.time(),
                    'total_count': len(communities)
                }

                if stats:
                    data['stats'] = stats

                # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                temp_filename = f"{self.filename}.tmp"
                with open(temp_filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=2, ensure_ascii=False)

                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                os.replace(temp_filename, self.filename)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {self.filename}: {e}")

    def get_file_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        try:
            if os.path.exists(self.filename):
                stat = os.stat(self.filename)
                with open(self.filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return {
                        'exists': True,
                        'size_bytes': stat.st_size,
                        'size_kb': round(stat.st_size / 1024, 2),
                        'modified': time.ctime(stat.st_mtime),
                        'communities_count': len(data.get('communities', [])),
                        'last_updated': data.get('last_updated'),
                        'stats': data.get('stats', {})
                    }
        except:
            pass

        return {'exists': False}


# =============================================================================
# –ë–´–°–¢–†–´–ô TWITTER API –ü–£–õ
# =============================================================================

class FastTwitterAPIPool:
    def __init__(self, api_keys: List[str]):
        self.api_keys = api_keys
        self.api_url = TWITTER_API_URL
        self._key_index = 0
        self._lock = threading.Lock()
        self.executor = ThreadPoolExecutor(
            max_workers=TWITTER_API_CONCURRENT_REQUESTS,
            thread_name_prefix="twitter_api"
        )
        self.cache = {}

    def get_next_api_key(self) -> str:
        with self._lock:
            api_key = self.api_keys[self._key_index % len(self.api_keys)]
            self._key_index += 1
            return api_key

    async def get_admin_info(self, community_url: str) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–µ –∫–æ–º—å—é–Ω–∏—Ç–∏"""
        community_id = self._extract_community_id(community_url)
        if not community_id or community_id == "unknown":
            return None

        if community_id in self.cache:
            return self.cache[community_id]

        try:
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                self.executor,
                self._get_admin_sync,
                community_id
            )

            if result:
                self.cache[community_id] = result
                return result

        except Exception:
            pass

        return None

    def _extract_community_id(self, community_url: str) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∫–æ–º—å—é–Ω–∏—Ç–∏"""
        try:
            idx = community_url.find('/i/communities/')
            if idx != -1:
                start = idx + 15
                end = len(community_url)
                for char in ['/', '?', '#']:
                    pos = community_url.find(char, start)
                    if pos != -1:
                        end = min(end, pos)
                community_id = community_url[start:end]
                if community_id.isdigit():
                    return community_id
        except:
            pass
        return "unknown"

    def _get_admin_sync(self, community_id: str) -> Optional[Dict[str, str]]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
        try:
            api_key = self.get_next_api_key()

            headers = {
                'x-api-key': api_key,
                'Accept': 'application/json',
                'User-Agent': 'PumpServer/1.0'
            }

            params = {'community_id': community_id}

            response = requests.get(
                self.api_url,
                headers=headers,
                params=params,
                timeout=HTTP_TIMEOUT
            )

            if response.status_code == 200:
                result = response.json()
                return self._parse_admin_from_result(result)

        except Exception:
            pass

        return None

    def _parse_admin_from_result(self, result: dict) -> Optional[Dict[str, str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∞–¥–º–∏–Ω–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ API"""
        try:
            admin_name = "Unknown"
            admin_username = "unknown"

            if "moderators" in result and result["moderators"]:
                moderators = result["moderators"]
                if isinstance(moderators, list) and len(moderators) > 0:
                    first_mod = moderators[0]
                    admin_name = first_mod.get("name", first_mod.get("display_name", "Unknown"))
                    admin_username = first_mod.get("username", first_mod.get("screen_name", "unknown"))

            elif "admin" in result:
                admin = result["admin"]
                if isinstance(admin, dict):
                    admin_name = admin.get("name", admin.get("display_name", "Unknown"))
                    admin_username = admin.get("username", admin.get("screen_name", "unknown"))

            if admin_username.startswith('@'):
                admin_username = admin_username[1:]

            return {
                "admin_name": admin_name,
                "admin_username": admin_username
            }

        except Exception:
            return None


# =============================================================================
# –ë–´–°–¢–†–´–ô –ú–û–ù–ò–¢–û–† –¢–û–ö–ï–ù–û–í –° –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–´–ú –•–†–ê–ù–ï–ù–ò–ï–ú
# =============================================================================

class FastTokenMonitor:
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.twitter_api = FastTwitterAPIPool(TWITTER_API_KEYS)
        self.running = False
        self.tokens_seen = set()
        self.metadata_cache = {}
        self.pump_cache = {}

        # üóÑÔ∏è –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï
        self.storage = PersistentCommunityStorage()
        self.processed_communities = self.storage.load_communities()
        self.last_save_time = time.time()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.processed_count = 0
        self.community_found_count = 0
        self.duplicate_communities_skipped = 0
        self.start_time = time.time()

        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.connected_clients = set()

    async def __aenter__(self):
        connector = aiohttp.TCPConnector(
            limit=500,
            limit_per_host=200,
            keepalive_timeout=60,
            enable_cleanup_closed=True,
            ttl_dns_cache=3600,
            use_dns_cache=True
        )

        timeout = aiohttp.ClientTimeout(
            total=HTTP_TIMEOUT,
            connect=CONNECT_TIMEOUT,
            sock_read=0.5
        )

        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers={
                'User-Agent': 'PumpServer/1.0',
                'Accept': 'application/json'
            }
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
        # üóÑÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        self.save_processed_communities()

    def normalize_community_url(self, url: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL –∫–æ–º—å—é–Ω–∏—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not url:
            return ""

        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ www
        normalized = url.lower()
        for prefix in ['https://', 'http://', 'www.']:
            if normalized.startswith(prefix):
                normalized = normalized[len(prefix):]

        # –ó–∞–º–µ–Ω—è–µ–º twitter.com –Ω–∞ x.com –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        if normalized.startswith('twitter.com'):
            normalized = normalized.replace('twitter.com', 'x.com', 1)

        # –£–±–∏—Ä–∞–µ–º trailing slash –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        normalized = normalized.split('?')[0].split('#')[0].rstrip('/')

        return normalized

    def is_twitter_community_url(self, url: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL –∫–æ–º—å—é–Ω–∏—Ç–∏"""
        return (isinstance(url, str) and
                len(url) > 25 and
                '/i/communities/' in url and
                ('x.com' in url or 'twitter.com' in url))

    def extract_twitter_url(self, data: Dict) -> Optional[str]:
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ Twitter URL"""
        if not data:
            return None

        # –ü—Ä—è–º—ã–µ –ø–æ–ª—è
        for field in ['twitter', 'twitter_url']:
            value = data.get(field)
            if isinstance(value, str) and self.is_twitter_community_url(value):
                return value

        # –ò–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        description = data.get('description', '')
        if isinstance(description, str) and '/i/communities/' in description:
            start = description.find('/i/communities/')
            if start != -1:
                end = description.find(' ', start)
                if end == -1:
                    end = len(description)
                potential_url = description[start:end].rstrip('.,!?')
                if self.is_twitter_community_url(potential_url):
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if not potential_url.startswith('http'):
                        potential_url = 'https://x.com' + potential_url
                    return potential_url

        return None

    async def get_pump_data(self, mint_address: str) -> Optional[Dict]:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å pump.fun"""
        if mint_address in self.pump_cache:
            return self.pump_cache[mint_address]

        try:
            url = f"https://frontend-api.pump.fun/coins/{mint_address}"
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    self.pump_cache[mint_address] = data
                    return data
        except:
            pass
        return None

    async def get_metadata(self, uri: str) -> Optional[Dict]:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        if uri in self.metadata_cache:
            return self.metadata_cache[uri]

        try:
            async with self.session.get(uri) as response:
                if response.status == 200:
                    data = await response.json()
                    self.metadata_cache[uri] = data
                    return data
        except:
            pass
        return None

    async def find_community_url(self, token_data: Dict) -> Optional[str]:
        """–ü–æ–∏—Å–∫ URL –∫–æ–º—å—é–Ω–∏—Ç–∏ –≤ —Ç–æ–∫–µ–Ω–µ"""
        mint_address = token_data.get('mint', '')

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
        community_url = self.extract_twitter_url(token_data)
        if community_url:
            return community_url

        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []

        if mint_address:
            tasks.append(self.get_pump_data(mint_address))

        for field in ['uri', 'metadata_uri', 'metadataUri']:
            uri = token_data.get(field)
            if uri and uri.startswith('http'):
                tasks.append(self.get_metadata(uri))

        if not tasks:
            return None

        try:
            # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            results = await asyncio.wait_for(
                asyncio.gather(*tasks, return_exceptions=True),
                timeout=1.5
            )

            for result in results:
                if isinstance(result, dict):
                    community_url = self.extract_twitter_url(result)
                    if community_url:
                        return community_url

        except asyncio.TimeoutError:
            pass

        return None

    def save_processed_communities(self):
        """üóÑÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏"""
        stats = {
            'processed_count': self.processed_count,
            'community_found_count': self.community_found_count,
            'duplicate_communities_skipped': self.duplicate_communities_skipped,
            'uptime_seconds': time.time() - self.start_time,
            'connected_clients': len(self.connected_clients)
        }
        self.storage.save_communities(self.processed_communities, stats)
        self.last_save_time = time.time()

    async def process_token(self, token_data: Dict):
        """–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
        mint_address = token_data.get('mint')
        if not mint_address or mint_address in self.tokens_seen:
            return

        self.tokens_seen.add(mint_address)
        self.processed_count += 1

        # üóÑÔ∏è –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if time.time() - self.last_save_time > AUTOSAVE_INTERVAL:
            self.save_processed_communities()

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        asyncio.create_task(self._process_token_async(token_data))

    async def _process_token_async(self, token_data: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ò—â–µ–º –∫–æ–º—å—é–Ω–∏—Ç–∏
            community_url = await self.find_community_url(token_data)
            if not community_url:
                return

            # üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢ –ö–û–ú–¨–Æ–ù–ò–¢–ò (—Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º)
            normalized_community = self.normalize_community_url(community_url)
            if normalized_community in self.processed_communities:
                self.duplicate_communities_skipped += 1
                print(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç –∫–æ–º—å—é–Ω–∏—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω: {community_url}")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞
            admin_info = await self.twitter_api.get_admin_info(community_url)
            if not admin_info:
                return

            # üõ°Ô∏è –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ú–¨–Æ–ù–ò–¢–ò –í –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ)
            self.processed_communities.add(normalized_community)
            self.community_found_count += 1

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = TokenResult(
                mint=token_data.get('mint', ''),
                name=token_data.get('name', 'Unknown'),
                symbol=token_data.get('symbol', 'UNK'),
                community_url=community_url,
                admin_name=admin_info['admin_name'],
                admin_username=admin_info['admin_username'],
                timestamp=token_data.get('timestamp', time.time())
            )

            print(f"‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –∫–æ–º—å—é–Ω–∏—Ç–∏: {result.symbol} ({result.admin_username})")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            await self.broadcast_to_clients(result)

        except Exception:
            pass

    async def broadcast_to_clients(self, token_result: TokenResult):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.connected_clients:
            return

        message = json.dumps({
            "type": "token",
            "data": token_result.to_dict()
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        disconnected = set()
        for client in self.connected_clients:
            try:
                await client.send(message)
            except:
                disconnected.add(client)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.connected_clients -= disconnected

    async def handle_websocket_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç pump.fun"""
        try:
            data = json.loads(message)

            if isinstance(data, list):
                for item in data:
                    if isinstance(item, dict) and 'mint' in item:
                        await self.process_token(item)
            elif isinstance(data, dict):
                if 'mint' in data:
                    await self.process_token(data)
                elif 'txType' in data and data.get('txType') == 'create':
                    await self.process_token(data)

        except Exception:
            pass

    async def connect_to_pump(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pump.fun WebSocket"""
        while self.running:
            try:
                print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {WS_URL}...")

                async with websockets.connect(
                        WS_URL,
                        ping_interval=None,
                        ping_timeout=None,
                        close_timeout=2,
                        max_size=2 ** 22,
                        compression=None
                ) as websocket:

                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ pump.fun!")

                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
                    subscribe_msg = {"method": "subscribeNewToken"}
                    await websocket.send(json.dumps(subscribe_msg))

                    print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–∞")

                    async for message in websocket:
                        if not self.running:
                            break
                        await self.handle_websocket_message(message)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
                if self.running:
                    print("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
                    await asyncio.sleep(3)

    async def handle_client(self, websocket, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.connected_clients.add(websocket)
        client_address = websocket.remote_address
        print(f"üë§ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {client_address}")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏
            file_info = self.storage.get_file_info()
            welcome = json.dumps({
                "type": "welcome",
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Pump.Fun Server (—Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º)",
                "persistent_storage": {
                    "file_exists": file_info['exists'],
                    "communities_loaded": len(self.processed_communities),
                    "file_size_kb": file_info.get('size_kb', 0)
                }
            })
            await websocket.send(welcome)

            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            async for message in websocket:
                try:
                    data = json.loads(message)
                    if data.get("type") == "ping":
                        await websocket.send(json.dumps({"type": "pong"}))
                    elif data.get("type") == "get_stats":
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö—Ä–∞–Ω–µ–Ω–∏—è
                        stats = {
                            "type": "storage_stats",
                            "data": {
                                "communities_in_memory": len(self.processed_communities),
                                "file_info": self.storage.get_file_info(),
                                "autosave_interval": AUTOSAVE_INTERVAL,
                                "last_save": self.last_save_time
                            }
                        }
                        await websocket.send(json.dumps(stats))
                except:
                    pass

        except Exception:
            pass
        finally:
            self.connected_clients.discard(websocket)
            print(f"üë§ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {client_address}")

    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.running = True
        self.start_time = time.time()

        print("üöÄ Pump.Fun Fast Server v1.2 (Persistent Storage)")
        print("‚ö° –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤")
        print("üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–º—å—é–Ω–∏—Ç–∏")
        print("üóÑÔ∏è –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        print(f"üîë Twitter API –∫–ª—é—á–µ–π: {len(TWITTER_API_KEYS)}")
        print(f"üåê –°–µ—Ä–≤–µ—Ä: {SERVER_HOST}:{SERVER_PORT}")
        print(f"üìÇ –§–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è: {PROCESSED_COMMUNITIES_FILE}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        file_info = self.storage.get_file_info()
        if file_info['exists']:
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º—å—é–Ω–∏—Ç–∏: {len(self.processed_communities)}")
            print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_info['size_kb']} KB")
            if file_info.get('last_updated'):
                last_update = time.ctime(file_info['last_updated'])
                print(f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}")
        else:
            print("üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω")

        print(f"üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {AUTOSAVE_INTERVAL} —Å–µ–∫—É–Ω–¥")
        print()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        server = await websockets.serve(
            self.handle_client,
            SERVER_HOST,
            SERVER_PORT,
            ping_interval=None,
            ping_timeout=10
        )
        print(f"üåê WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {SERVER_HOST}:{SERVER_PORT}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_task = asyncio.create_task(self._print_stats_periodically())

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ pump.fun
        await self.connect_to_pump()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_task.cancel()
        server.close()
        await server.wait_closed()

    async def _print_stats_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.running:
            try:
                await asyncio.sleep(30)
                if self.running:
                    elapsed = time.time() - self.start_time
                    rate = self.processed_count / max(elapsed, 1)
                    print(f"üìä {rate:.1f} tok/s | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.processed_count} | "
                          f"–° –∫–æ–º—å—é–Ω–∏—Ç–∏: {self.community_found_count} | "
                          f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {self.duplicate_communities_skipped} | "
                          f"–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {len(self.processed_communities)} | "
                          f"–ö–ª–∏–µ–Ω—Ç–æ–≤: {len(self.connected_clients)}")
            except asyncio.CancelledError:
                break
            except:
                pass

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.running = False
        # üóÑÔ∏è –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π...")
        self.save_processed_communities()


# =============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    monitor = FastTokenMonitor()

    try:
        async with monitor:
            await monitor.start_server()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        monitor.stop()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
